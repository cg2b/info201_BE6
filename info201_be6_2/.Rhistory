return(paste(make_introdution(name,age),sentence))
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name,my_age,"2018-11-22")
bday_intro <- function(name,age,birthday)
{
N <- as_date(birthday)-today
sentence <- paste("In",N,"days I'll be",age+1)
return(paste(make_introduction(name,age),sentence))
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name,my_age,"2018-11-22")
my_bday_intro
x <- c("info 123","cse 209","seg")
str_detect(x,0:9)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, )
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\d")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "[a-z]")
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
str_extract(shopping_list,"\\w*")
str_extract(x,"\\w*")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"\\w*")
str_detece(shopping_list,"[0:9]")
str_detect(shopping_list,"[0:9]")
str_detect(shopping_list,"1:9")
str_detect(shopping_list,"4")
str_detect(shopping_list,"[123456789]")
str_detect(shopping_list,"[0123456789]")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"[0123456789]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[0123456789]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[a-z]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[a-Z]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[0-9]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[a-z][A-Z]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[a-z || A-Z]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[!0-9]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[!(0-9)]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"![0-9]")
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"-9")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
# Extract all matches
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
# Simplify results into character matrix
str_extract_all(shopping_list, "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\d", simplify = TRUE)
# Extract all words
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
str_extract_all(c("INFO 201", "CSE 142", "mps-803c"),"[a-z]+")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"[a-z]+")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"!\\d")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"[0-9]")
str_extract(c("INFO 201", "CSE 142", "mps-803c"),"[!(0-9)]")
removeNumbers(c("INFO 201", "CSE 142", "mps-803c"))
str_remove(c("INFO 201", "CSE 142", "mps-803c"),"[0-9]")
str_remove_all(c("INFO 201", "CSE 142", "mps-803c"),"[0-9]")
RemoveDigits <- function(vec)
{
vec <- str_remove_all(vec,"[0-9]")
return(vec)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits <- function(vec)
{
vec <- str_remove_all(vec,"[0-9]")
if(sum(str_detect(vec,"[0-9]")))
{ print("Oh no!")}
else print("Yay!")
return(vec)
}
RemoveDigits <- function(vec)
{
vec <- str_remove_all(vec,"[0-9]")
if(sum(str_detect(vec,"[0-9]")))
{ print("Oh no!")}
else print("Yay!")
return(vec)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
vec <- c("INFO 201", "CSE 142", "mps-803c")
if(sum(str_detect(vec,"[0-9]")))
{ print("Oh no!")}
else print("Yay!")
vec <- c("INFO 201", "CSE 142", "mps-803c")
if(sum(str_detect(vec,"[0-9]")))
{ print("Oh no!")}
print("Yay!")
if(sum(str_detect(vec,"[0-9]")))
{ print("Oh no!")}
else print("Yay!")
if(sum(str_detect(vec,"[0-9]"))>0)
{ print("Oh no!")}
else print("Yay!")
RemoveDigits <- function(vec)
{
vec <- str_remove_all(vec,"[0-9]")
if(sum(str_detect(vec,"[0-9]"))>0)
{ print("Oh no!")}
else print("Yay!")
return(vec)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
make_introduction <- function(name, age)
{
str1 <- "Hello, my name is "
str2 <- " and I am "
str3 <- " years old. Nice to meet u!"
return(str_c(str1, name,str2, age,str3))
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name,my_age)
my_intro
casual_intro
minutes_in_two_day <- double(minutes_in_day)
minutes_in_two_day
excited
movies <- c("Antman","Avenagers","Mission:Impossible","Green Miracle","Gamp Forest","Venom")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies,"is a great movie!")
excited
library(lubridate)
vec <- c("INFO 201", "CSE 142", "mps-803c")
if(sum(str_detect(vec,"[0-9]"))>0)
{ print("Oh no!")}
else print("Yay!")
vec <- c("INFO", "CSE", "mps-c")
if(sum(str_detect(vec,"[0-9]"))>0)
{ print("Oh no!")}
else print("Yay!")
ifelse(sum(str_detect(vec,"[0-9]"))>0,print("Oh no!"), print("Yay!"))
ifelse(sum(str_detect(vec,"[0-9]"))>0,print("Oh no!"), print("Yay!"))
ifelse(sum(str_detect(vec,"[0-9]"))>0,"Oh no!", "Yay!")
employee[["phones"]] <- c(landline="206-123-4567",
mobile="206-098-7654")
employee <- list(zip = "98115", name = "Teresa", student = FALSE)
employee[["phones"]] <- c(landline="206-123-4567",
mobile="206-098-7654")
employee
employee[["phone"]] <- NULL
employee
employee[["phoneS"]] <- NULL
employee[["phones"]] <- NULL
employee
employee[["phones"]] <- list(number = 193, relationship = "son" )
employee
employee[["phones"]] <- NULL
employee[[4]] <- c(landline="206-123-4567",
mobile="206-098-7654")
employee
health
height <- c(180, 174, 167, 184, 191)
weight <- c(56, 67, 57, 68, 77, 69)
health <- data.frame(height, weight)
weight[6] <- NULL
weight[6] <- FALSE
weight
weight[6] <- NULL
weight <- c(56, 67, 57, 68, 77)
weight
health <- data.frame(height, weight)
health
health[1:3, 1]
health[1:3, ]
health[,1 ]
health[1, 1]
health[1:3]
health[1:2]
health[1]
health[[1]]
health[, 1]
health$height
health["height"]
row.names <- c("Steve", "Cathy", "Joe", "Li", "Sanjeev")
health
row.names(health) <- c("Steve", "Cathy", "Joe", "Li", "Sanjeev")
health
health["high"] <- health$height > 170
health
health[["high"] <- health$height > 160
health[["high"]] <- health$height > 160
health
health[["high"]] <- NULL
health
health$BMI <- health$weight/(health$height/100)^2
health
shirt_sizes <- c("small", "medium", "large", "medium", "small", "large")
shirt_sizes_factor <- as.factor(shirt_sizes)
length(shirt_sizes_factor)
shirt_sizes_factor
cost <- c(10, 12, 11, 13, 9, 10)
shirts <- data.frame(cost, shirt_sizes_factor)
shirts
is.factor(shirts$shirt_sizes_factor)
as.vector(shirts$shirt_sizes_factor)
is.factor(shirts$shirt_sizes_factor)
as.vector(shirts$shirt_sizes_factor)
shirts <- data.frame(cost, shirt_sizes_factor, stringAsFactor = FALSE)
is.factor(shirts$shirt_sizes_factor)
cars
knitr::opts_chunk$set(echo = TRUE)
letters <- letters[1:3]
numbers <- 1:3
library(knitr)
head(iris)
with(iris, plot(Sepal.Length ~ Sepal.Width))
with(iris,
plot(Sepal.Length ~ Sepal.Width, col = Species)
)
with(iris,
plot(Sepal.Length ~ Sepal.Width,
col = Species,
pch = 16)
)
with(iris,
plot(Sepal.Length ~ Sepal.Width,
col = Species,
pch = 16, cex = 2)
)
cat(nrow(iris), "flowers\n")
with(iris,
plot(Sepal.Length ~ Sepal.Width,
col = Species,
pch = 16, cex = 3)
)
getwd()
ggplot(diamonds) +
geom_point(aes(x = carat, y = price)) # make point of plo
library(ggplot2)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price)) # make point of plot
head(economics)
head(economics) %>%
knitr::kable()
library(ggplot2)
library(dplyr)
library(knitr)
head(economics) %>%
knitr::kable()
ggplot(economics) +
geom_point(aes(x = date, y = uempmed))
ggplot(economics) +
geom_line(aes(x = date, y = uempmed))
ggplot(economics) +
geom_line(aes(x = date, y = uempmed)) +
geom_point(aes(x = date, y = uempmed))
library(ggplot2)
party <- sample(c("R", "D"), 435, replace = TRUE)
sex <- sample(c(0,1), 435, replace = TRUE)
age <- sample(35:99, 435, replace = TRUE)
pol <- data.frame(party, sex, age)
ggplot(pol) +
geom_bar(aes(party))
## load API keys
source(".gitignore")
# google.key for representative in an address
# propublica.key for state representatives information
## you may also load necessary libraries and set various options here
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
library(knitr)
library(ggplot2)
library(lubridate)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address_test <- "San Francisco, CA"
## Test your code with addresses in different states, see if it works
address <- "25th Ave NE, Seattle, WA"
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
state
state_repre_data
pick_repre_id <- sample(members$id, 1)
pick_repre_id
fr <- map_data("france")
install.packages("maps")
fr <- map_data("france")
head(fr)
tail(fr)
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group)) # make the outline of a scale
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group), col = "white")
ggplot(fr) +
geom_polygon(aes(x = long, y =lat), col = "white")
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group), col = "white") +
coord_quickmap()
us <- map_data("state")
head(us)
ggpplot(us) +
goem_polygon(aes(x = long, y = lat), col = "red")
us <- map_data("state")
ggplot(us) +
goem_polygon(aes(x = long, y = lat), col = "red")
ggplot(us) +
geom_polygon(aes(x = long, y = lat), col = "red")
ggplot(us) +
geom_polygon(aes(x = long, y = lat, group = group), col = "red")
ggplot(us) +
geom_polygon(aes(x = long, y = lat, group = group), col = "red") +
coord_quickmap()
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group, col = "white"))
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group, col = "whie"))
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group, col = "whi"))
ggplot(fr) +
geom_polygon(aes(x = long, y =lat, group = group, col = "BLACE"))
ggplot(pol) +
geom_bar(aes(party, fill = party)) +
scale_fill_manual(
breaks = c("D", "R"),
values = c("blue", "red")
labels = c("Democratic", "Republican")
)
ggplot(pol) +
geom_bar(aes(party, fill = party)) +
scale_fill_manual(
breaks = c("D", "R"),
values = c("blue", "red"),
labels = c("Democratic", "Republican")
)
ggplot(party_affiliation, aes(party_affiliation$party, party_affiliation$freq)) +
geom_col() + aes(fill = party_affiliation$party) +
ggtitle("Party Affiliation in WA") +
labs(x = "party", y = "frequency") +
scale_fill_manual(
breaks = "party",
values = c("blue", "red"),
labels = c("Democratic", "Republican")
)
ggplot(party_affiliation, aes(party_affiliation$party, party_affiliation$freq)) +
geom_col() + aes(fill = party_affiliation$party) +
ggtitle("Party Affiliation in WA") +
labs(x = "party", y = "frequency") +
scale_fill_manual(
breaks = party_affiliation$party,
values = c("blue", "red"),
labels = c("Democratic", "Republican")
)
scale_fill_manual(
breaks = c("D", "R"),
values = c("blue", "red"),
labels = c("Democratic", "Republican")
)
ggplot(pol) +
geom_bar(aes(party, fill = party)) +
scale_fill_manual(
breaks = c("D", "R"),
values = c("blue", "red"),
labels = c("Democratic", "Republican")
)
## load API keys
source(".gitignore")
## load API keys
source(".gitignore")
## load API keys
source(".gitignore")
## load API keys
source("keys.R")
## load necessary libraries
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
library(knitr)
library(ggplot2)
library(lubridate)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
res_representatives
repre_base <- "https://www.googleapis.com/civicinfo/v2"
endpoint <- "voterinfo"
uri <- paste(repre_base, endpoint, sep = "/")
address <- "25th Ave NE, Seattle, WA"
election_id <- 6000
query <- list(address = address, electionId = election_id, key = google.key)
voter_info <- GET(uri, query)
voter_info
repre_base <- "https://www.googleapis.com/civicinfo/v2"
endpoint <- "voterinfo"
uri <- paste(repre_base, endpoint, sep = "/")
address <- "8520 25th Ave NE, Seattle, WA"
election_id <- 6000
query <- list(address = address, electionId = election_id, key = google.key)
voter_info <- GET(uri, query)
voter_info
repre_base <- "https://www.googleapis.com/civicinfo/v2"
endpoint <- "voterinfo"
uri <- paste(repre_base, endpoint, sep = "/")
address <- "8520 25th Ave NE"
election_id <- 6000
query <- list(address = address, electionId = election_id, key = google.key)
voter_info <- GET(uri, query)
voter_info
repre_base <- "https://www.googleapis.com/civicinfo/v2"
endpoint <- "voterinfo"
uri <- paste(repre_base, endpoint, sep = "/")
address <- "8520 25th Ave NE, Seattle, WA"
election_id <- 6000
query <- list(address = address, electionId = election_id, key = google.key)
voter_info <- GET(uri, query = query)
voter_info
repre_base <- "https://www.googleapis.com/civicinfo/v2"
endpoint <- "voterinfo"
uri <- paste(repre_base, endpoint, sep = "/")
address <- "25th Ave NE, Seattle, WA"
election_id <- 6000
query <- list(address = address, electionId = election_id, key = google.key)
voter_info <- GET(uri, query = query)
voter_info
voter_info <- GET(uri, query = query)
body <- content(voter_info, "text")
voter_info_data <- fromJSON(body)
voter_info_data
View(voter_info_data)
View(representatives_data)
district <- representatives_data$divisions$`ocd-division/country:us/state:wa/cd:7`
district
district <- representatives_data$divisions$
`ocd-division/country:us/state:wa/cd:7`$name
district
rsconnect::setAccountInfo(name='teresachengong',
token='23B8AD7AE7B22117FE38610847CFFA92',
secret='RAqODqk7A+XqtdVqHhehdpTctoVzkQLC3O1PySnv')
shiny::runApp('C:/Users/Teresa/Desktop/a8-app-cg2b')
getwd()
setwd("../Desktop/info201/info201_BE6")
setwd("info201_be6_2")
shiny::runApp()
runApp()
df_crime <- read.csv(file = "../data/crime.csv", sep = ",", stringsAsFactors = FALSE)
df_911 <- read.csv(file = "../data/SEAfire911.csv", sep = ",", stringsAsFactors = FALSE)
data <- df_911
crime.data <- df_crime
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat("sef")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(crime.data)
rm(crime.data)
rm(data)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
